#This is for the messages between the server and client
#SET UP FOR TASK 1.4

#What does the client recieve? -------------
RESULT = "RESULT HIT/MISS"
BOARD = "send updated board"

#client sends
FIRE = "FIRE B5"
PLACE = "PLACE A1 H BATTLESHIP"


#SERVER SIDE #sends
RESULT




line = 'B5'

if input (a,1) >> FIRE server 

#example of how the server would send a message to the client
if line.startswith("RESULT"):
    print(f"Shot result: {line.split()[1]}")  # "MISS" or "HIT"


#TODO
- check in firing or placing
    - get the game to send out some variable that can be checked

- hit and miss detection
    - also needs a result from the game somehow

- tie it all together.


#TASK 1.4 ----------------------------------------------------------------------------------SERVER
def clientListener(rfile, wfile): 
        #to deal with the client msgs

    while True:
        line = rfile.readline()
        if not line:
            print("[INFO] Server disconnected.")
            break

        logger.debug(f"[INFO] Received message from client: {line}")

        #PLACE MESSAGE RECIEVED (e.g., "Place ship at A1")
        if line.startswith("Place"):
            location = line.split()[-1]  # Assuming the format "Place ship at [location]"
            logger.debug(f"[INFO] Placing ship at {location}")

            # Respond with a successful placement message
            response = f"Successfully placed ship at {location}"
            wfile.write(response + '\n')
            wfile.flush()
            logger.debug(f"[INFO] Sent to client: {response}")

        #FIRE MESSAGE RECIEVED (e.g., "Fire at A1")
        elif line.startswith("Fire at"):
            # Extract the target location (e.g., "Fire at A1")
            target = line[8:]  # Everything after "Fire at "
            logger.debug(f"[INFO] Player fired at {target}")

            # For now, let's assume the server sends a random hit/miss result
            # REPLACE with game logic
            result = "HIT" if target == "A1" else "MISS"  # Example REMOVE LATER
            response = f"RESULT {result}"

            # Send the result back to the client
            wfile.write(response + '\n')
            wfile.flush()
            logger.debug(f"[INFO] Sent to client: {response}")

        else:
            #invalid command received?? - NOT sure if this would happen but this is just in case 
            logger.warning(f"[WARNING] Unknown command received: {line}")
            response = "Invalid command. Try again."
            wfile.write(response + '\n')
            wfile.flush()
            logger.debug(f"[INFO] Sent to client: {response}")

#TASK 1.4 ----------------------------------------------------------------------------------Client
def send_messages(wfile,message):
        wfile.write(message + '\n')
        wfile.flush()
        print(f"[INFO] Sent to server: {message}")
        return